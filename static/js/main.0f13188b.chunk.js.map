{"version":3,"sources":["RomanInput.js","RomanOutput.js","App.js","serviceWorker.js","index.js"],"names":["RomanInput","state","westernNum","changeValue","event","setState","target","value","handleSubmit","preventDefault","props","romanConvert","className","id","onSubmit","this","htmlFor","type","name","min","max","placeholder","onChange","form","onClick","Component","RomanOutput","westNum","romanNum","App","numValue","romanValue","num","finalRoman","numeral","roman","newArray","convert","finalNum","alert","i","length","push","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOA+BeA,E,2MA5BbC,MAAQ,CACNC,WAAY,K,EAGdC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZH,WAAYE,EAAME,OAAOC,S,EAI7BC,aAAe,SAACJ,GACdA,EAAMK,iBACN,EAAKC,MAAMC,aAAa,EAAKV,MAAMC,a,wEAInC,OACE,yBAAKU,UAAU,mBACb,0BAAMA,UAAU,QAAQC,GAAG,QAAQC,SAAUC,KAAKP,cAChD,2BAAOQ,QAAQ,SAASJ,UAAU,gBAAlC,2BACA,2BAAOK,KAAK,SAASC,KAAK,SAASL,GAAG,SAASD,UAAU,cAAcO,IAAI,IAAIC,IAAI,QAAQC,YAAY,eAAeC,SAAUP,KAAKZ,eAEvI,4BAAQS,UAAU,gBAAgBK,KAAK,SAASM,KAAK,QAAQC,QAAST,KAAKP,cAA3E,e,GAvBiBiB,aCWVC,EAXK,SAAChB,GAAW,IACvBiB,EAAqBjB,EAArBiB,QAASC,EAAYlB,EAAZkB,SAEhB,OACE,yBAAKhB,UAAU,oBACb,uBAAGA,UAAW,gBAAd,mBAA8Ce,GAC9C,uBAAGf,UAAU,UAAb,yBAA4C,0BAAMA,UAAU,gBAAgBgB,MC8CnEC,E,2MAjDb5B,MAAQ,CACN6B,SAAU,GACVC,WAAY,K,EAGdpB,aAAe,SAACqB,GACd,IAIIC,EAJEC,EAAU,CAAC,IAAO,IAAM,IAAM,IAAM,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GACjFC,EAAQ,CAAC,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAC7FC,EAAW,GACXC,GAAU,EAEVC,EAAWN,EACf,GAAY,MAARA,EACF,OAAOO,MAAM,+BAGf,KAAMF,GACJ,IAAK,IAAIG,EAAI,EAAGA,EAAIN,EAAQO,OAAQD,IAClC,GAAIR,GAAOE,EAAQM,GAAI,CACrBJ,EAASM,KAAKP,EAAMK,IAER,KADZR,GAAYE,EAAQM,MAElBH,GAAU,GAEZ,MAINJ,EAAaG,EAASO,KAAK,IAC3B,EAAKtC,SAAS,CACZ0B,WAAYE,EACZH,SAAUQ,K,wEAKZ,OACE,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,eAAd,2BACA,uBAAGA,UAAU,cAAb,oDAEF,kBAAC,EAAD,CAAYD,aAAcI,KAAKJ,eAC/B,kBAAC,EAAD,CAAagB,QAASZ,KAAKd,MAAM6B,SAAUF,SAAUb,KAAKd,MAAM8B,kB,GA5CtDN,aCQEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.0f13188b.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass RomanInput extends Component {\n  state = {\n    westernNum: \"0\"\n  }\n\n  changeValue = (event) => {\n    this.setState({\n      westernNum: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    this.props.romanConvert(this.state.westernNum)\n  }\n\n  render() {\n    return(\n      <div className=\"input-container\">\n        <form className=\"form1\" id=\"form1\" onSubmit={this.handleSubmit}>\n          <label htmlFor=\"digits\" className=\"digits-label\">Please enter a number: </label>\n          <input type=\"number\" name=\"digits\" id=\"digits\" className=\"digits-text\" min=\"0\" max=\"10000\" placeholder=\"Up to 10,000\" onChange={this.changeValue}/>\n        </form>\n        <button className=\"digits-button\" type=\"button\" form=\"form1\" onClick={this.handleSubmit}>Submit</button>\n      </div>\n    )\n  }\n}\n\nexport default RomanInput ","import React from 'react'\n\nconst RomanOutput = (props) => {\n  const {westNum, romanNum} = props\n\n  return(\n    <div className=\"output-container\">\n      <p className =\"modernNumber\">For the number: {westNum}</p>\n      <p className=\"result\">The Roman Numeral is: <span className=\"result-roman\">{romanNum}</span></p>\n    </div>\n  )\n}\n\nexport default RomanOutput","import React, {Component} from 'react';\nimport RomanInput from \"./RomanInput\"\nimport RomanOutput from \"./RomanOutput\"\n\nclass App extends Component {\n  state = {\n    numValue: 10,\n    romanValue: \"X\"\n  }\n\n  romanConvert = (num) => {\n    const numeral = [10000, 9000, 5000, 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    const roman = [\"X\", \"MX\", \"V\", \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    let newArray = []\n    let convert = true\n    let finalRoman = \"\"\n    let finalNum = num\n    if (num === \"0\") {\n      return alert(\"Please input a valid number\")\n    }\n\n    while(convert) {\n      for (var i = 0; i < numeral.length; i++) {\n        if (num >= numeral[i]) {\n          newArray.push(roman[i])\n          num = num - numeral[i]\n          if (num === 0) {\n            convert = false;\n          }\n          break\n        }\n      }\n    }\n    finalRoman = newArray.join(\"\")\n    this.setState({\n      romanValue: finalRoman,\n      numValue: finalNum\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"roman-container\">\n          <h1 className=\"roman-title\">Roman Numeral Converter</h1>\n          <p className=\"roman-text\">Enter a number to convert it to roman numerals.</p>\n        </div>\n        <RomanInput romanConvert={this.romanConvert}/>\n        <RomanOutput westNum={this.state.numValue} romanNum={this.state.romanValue}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}